USAGE = "USAGE: ruby #{File.basename(__FILE__)} PATH"

unless ARGV.size == 1
    puts "Generate function declarations for Functions module."
	puts USAGE
	exit
end

OUTPUT = 'CfgFunctionDeclarations.hpp'

path = File.expand_path(ARGV[0])

unless File.directory? path
	puts "Could not find directory: #{path}"
	puts USAGE
	exit
end

path =~ /(\/x\/.*)$/
relative_path = $1

unless relative_path
	puts "Could not find directory: #{path}"
	puts USAGE
	exit
end

Dir.new(path).each do |addon|
	addon_path = File.join(path, addon)

	if addon_path =~ /^#{path}\/\w+$/
		config = Hash.new
			
		Dir.new(addon_path).each do |function_file|
			if function_file =~ /^([a-z][a-z0-9]+)_(\w+)_fnc_(\w+)\.sqf$/i
				type, tag, name = $1, $2, $3
				
				type.capitalize!
				
				description = if File.read(File.join(addon_path, function_file)) =~ /@description +(.+) *$/
					$1
				else
					'<NO DESC>'
				end
				
				puts "Adding #{function_file}: #{description}"
				
				config[tag] = Hash.new unless config[tag]
				config[tag][type] = Hash.new unless config[tag][type]
				config[tag][type][name] = {
					:description => description,
					:path => "#{relative_path.gsub(/\//, '\\')}\\#{addon}\\#{function_file}",
					:name => "#{tag}_fnc_#{name}"
				}
			end
		end
			
		unless config.empty?
			output_file = File.join(addon_path, OUTPUT)
			
			# CfgFunctions >> Tag >> function type >> function.
			File.open(output_file, 'w') do |file|
				file.puts <<END_CONFIG
// Automatically generated by '#{File.basename($0)}' (#{Time.new})

#ifndef FUNCTIONS_CONFIG
#define FUNCTIONS_CONFIG

class CfgFunctions
{
END_CONFIG
				config.each_pair do |tag, types|
					file.puts "\tclass #{tag}\n\t{";
					
					types.each_pair do |type, functions|
						file.puts "\t\tclass #{type}\n\t\t{";
						
						functions.each do |function, data|
							file.puts <<END_CONFIG	
			// #{data[:name]}
			class #{function}
			{
				description="#{data[:description].gsub(/"/, '""')}";
				file="#{data[:path]}";
			};
END_CONFIG
						end
						
						file.puts "\t\t};";
					end
					
					file.puts "\t};";
				end
				
				file.puts "};\n\n#endif // FUNCTIONS_CONFIG";
			end
		end
	end
end