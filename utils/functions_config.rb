USAGE = "USAGE: ruby #{File.basename(__FILE__)} PATH"
OUTPUT = 'CfgFunctionDeclarations.hpp'

DOC_PROJECT = 'ndocs-project'

DOC_MENU = "#{DOC_PROJECT}/Menu.txt"
DOC_MENU_TEMPLATE = "#{DOC_PROJECT}/menu_template.txt"

DOC_LANGUAGE = "#{DOC_PROJECT}/Languages.txt"
DOC_LANGUAGE_TEMPLATE = "#{DOC_PROJECT}/languages_template.txt"

TEMPLATE_HEADER =<<END_TEXT
# -----------------------------------------------------------------------------
# Automatically generated by '#{File.basename($0)}'
# DO NOT MANUALLY EDIT THIS FILE!
# -----------------------------------------------------------------------------

END_TEXT

unless ARGV.size == 1
    puts "Generate function declarations for Functions module."
	puts USAGE
	exit
end



path = File.expand_path(ARGV[0])

unless File.directory? path
	puts "Could not find directory: #{path}"
	puts File.cwd
	puts USAGE
	exit
end

path =~ %r[(/x/.*)$]
relative_path = $1

unless relative_path
	puts "Could not find relative directory in: #{path}"
	puts USAGE
	exit
end

all_configs = Hash.new

Dir.new(path).each do |addon|
	addon_path = File.join(path, addon)
	
	if addon_path =~ %r[^#{path}/(?:\w+_)?([^/\.]+)$]

		type = $1
		type = 'Misc' if type =~ /^main$/i
		
		puts "\n=> #{addon_path}"
		config = Hash.new
			
		Dir.new(addon_path).each do |function_file|
			if function_file =~ /^fnc_(\w+)\.sqf$/i
				name = $1
				
				type.capitalize!
				source = File.read(File.join(addon_path, function_file))
				
				unless source =~ /Function:\s*(\w+)_fnc_#{name}/i
					$stderr.puts ">>> ERROR >>> Incorrect/missing Function name documented in: #{function_file}"
					exit false
				end
				
				tag = $1
				
				description = if source =~ /Description:\s*([^\b]*?)\n\s*\n/
					$1.gsub(/\s*\n\s*/, ' ')
				else
					'<NO DESC>'
				end
				
				puts "Adding #{function_file}: #{description}"
				
				config[tag] = Hash.new unless config[tag]
				config[tag][type] = Hash.new unless config[tag][type]
				config[tag][type][name] = {
					:description => description,
					:path => "#{relative_path.gsub(/\//, '\\')}\\#{addon}\\#{function_file}",
					:name => "#{tag}_fnc_#{name}"
				}
			end
		end
			
		unless config.empty?
			output_file = File.join(addon_path, OUTPUT)
			
			# CfgFunctions >> Tag >> function type >> function.
			File.open(output_file, 'w') do |file|
				file.puts <<END_CONFIG
// ----------------------------------------------------------------------------
// Automatically generated by '#{File.basename($0)}'
// DO NOT MANUALLY EDIT THIS FILE!
// ----------------------------------------------------------------------------

#ifndef FUNCTIONS_CONFIG
#define FUNCTIONS_CONFIG

class CfgFunctions
{
END_CONFIG
				config.each_pair do |tag, types|
					file.puts "\tclass #{tag}\n\t{";
					
					types.each_pair do |type, functions|
						file.puts "\t\tclass #{type}\n\t\t{";
						
						functions.each do |function, data|
							file.puts <<END_CONFIG	
			// #{data[:name]}
			class #{function}
			{
				description = "#{data[:description].gsub(/"/, '""')}";
				file = "#{data[:path]}";
			};
END_CONFIG
						end
						
						file.puts "\t\t};";
					end
					
					file.puts "\t};";
				end
				
				file.puts "};\n\n#endif // FUNCTIONS_CONFIG";
			end
		end
		
		config.each_pair do |tag, types|
			all_configs[tag] = Hash.new if all_configs[tag].nil?
			types.each_pair do |type, functions|
				all_configs[tag][type] = Hash.new if all_configs[tag][type].nil?
				all_configs[tag][type].merge! functions
			end
		end
	end
end

# Generate a menu for Ndocs.
menu_template = File.read(DOC_MENU_TEMPLATE)
menu = ''	

all_configs.to_a.sort { |a, b| a[0] <=> b[0] }.each do |tag, types|
	menu += "\tGroup: #{tag} {\n"
	types.to_a.sort { |a, b| a[0] <=> b[0] }.each do |type, functions|
		menu += "\t\tGroup: #{type} {\n"
		functions.to_a.sort { |a, b| a[0] <=> b[0] }.each do |function, data|
			data[:path] =~ /\\Addons\\(.*)$/
			folder = $1
			data[:name] =~ /_fnc_(.*)$/
			name = $1
			menu += "\t\t\tFile: #{name}  (no auto-title, #{folder})\n"
		end
		menu += "\t\t} # Group: #{type}\n\n"
	end
	menu += "\t} # Group: #{tag}\n\n"
end
menu_template.sub!(/\$FUNCTIONS\$/, menu)

File.open(DOC_MENU, 'w') do |file|
	file.puts TEMPLATE_HEADER
	file.puts menu_template
end
puts "\nGenerated #{DOC_MENU}"

# Generate a language template file for NDocs.
language_template = File.read(DOC_LANGUAGE_TEMPLATE)
language_template.sub!(/\$IGNORED_PREFIXES\$/, all_configs.keys.collect { |s| "#{s}_fnc_"}.join(' '))
File.open(DOC_LANGUAGE, 'w') do |file|
	file.puts TEMPLATE_HEADER
	file.puts language_template
end
puts "\nGenerated #{DOC_LANGUAGE}"