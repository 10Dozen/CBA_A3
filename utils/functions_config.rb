USAGE = "USAGE: ruby #{File.basename(__FILE__)} PATH"
OUTPUT = 'CfgFunctionDeclarations.hpp'
DOC_MENU = "ndocs-project/Menu.txt"
DOC_MENU_TEMPLATE = "ndocs-project/ndocs_menu_template.txt"


unless ARGV.size == 1
    puts "Generate function declarations for Functions module."
	puts USAGE
	exit
end



path = File.expand_path(ARGV[0])

unless File.directory? path
	puts "Could not find directory: #{path}"
	puts USAGE
	exit
end

path =~ /(\/x\/.*)$/
relative_path = $1

unless relative_path
	puts "Could not find directory: #{path}"
	puts USAGE
	exit
end

Dir.new(path).each do |addon|
	addon_path = File.join(path, addon)

	if addon_path =~ /^#{path}\/\w+$/
		config = Hash.new
			
		Dir.new(addon_path).each do |function_file|
			if function_file =~ /^([a-z][a-z0-9]+)_(\w+)_fnc_(\w+)\.sqf$/i
				type, tag, name = $1, $2, $3
				
				type.capitalize!
				source = File.read(File.join(addon_path, function_file))
				
				unless source =~ /Function:\s*#{tag}_fnc_#{name}/
					$stderr.puts ">>> ERROR >>> Incorrect/missing Function name documented in: #{function_file}"
					exit false
				end
				
				description = if source =~ /Description:\s*([^\b]*?)\n\s*\n/
					$1.gsub(/\s*\n\s*/, ' ')
				else
					'<NO DESC>'
				end
				
				puts "Adding #{function_file}: #{description}"
				
				config[tag] = Hash.new unless config[tag]
				config[tag][type] = Hash.new unless config[tag][type]
				config[tag][type][name] = {
					:description => description,
					:path => "#{relative_path.gsub(/\//, '\\')}\\#{addon}\\#{function_file}",
					:name => "#{tag}_fnc_#{name}"
				}
			end
		end
			
		unless config.empty?
			output_file = File.join(addon_path, OUTPUT)
			
			# CfgFunctions >> Tag >> function type >> function.
			File.open(output_file, 'w') do |file|
				file.puts <<END_CONFIG
// Automatically generated by '#{File.basename($0)}' (#{Time.new})
// DO NOT MANUALLY EDIT THIS FILE!

#ifndef FUNCTIONS_CONFIG
#define FUNCTIONS_CONFIG

class CfgFunctions
{
END_CONFIG
				config.each_pair do |tag, types|
					file.puts "\tclass #{tag}\n\t{";
					
					types.each_pair do |type, functions|
						file.puts "\t\tclass #{type}\n\t\t{";
						
						functions.each do |function, data|
							file.puts <<END_CONFIG	
			// #{data[:name]}
			class #{function}
			{
				description = "#{data[:description].gsub(/"/, '""')}";
				file = "#{data[:path]}";
			};
END_CONFIG
						end
						
						file.puts "\t\t};";
					end
					
					file.puts "\t};";
				end
				
				file.puts "};\n\n#endif // FUNCTIONS_CONFIG";
			end
			
			# Generate a menu for Ndocs.
			menu_template = File.read(DOC_MENU_TEMPLATE)
			menu = ""
			
			config.to_a.sort { |a, b| a[0] <=> b[0] }.each do |tag, types|
				menu += "\tGroup: #{tag} {\n"
				types.to_a.sort { |a, b| a[0] <=> b[0] }.each do |type, functions|
					menu += "\t\tGroup: #{type} {\n"
					functions.to_a.sort { |a, b| a[0] <=> b[0] }.each do |function, data|
						data[:path] =~ /\\Addons\\(.*)$/
						path = $1
						data[:name] =~ /_fnc_(.*)$/
						name = $1
						menu += "\t\t\tFile: #{name}  (no auto-title, #{path})\n"
					end
					menu += "\t\t} # Group: #{type}\n\n"
				end
				menu += "\t} # Group: #{tag}\n\n"
			end
			menu_template.sub!(/\$FUNCTIONS\$/, menu)
			
			File.open(DOC_MENU, 'w') { |f| f.puts menu_template }
			
		end
	end
end