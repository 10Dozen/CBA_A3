// Automatically generated by 'functions_config.rb' (Thu Jun 18 01:43:48 +0100 2009)
// DO NOT MANUALLY EDIT THIS FILE!

#ifndef FUNCTIONS_CONFIG
#define FUNCTIONS_CONFIG

class CfgFunctions
{
	class CBA
	{
		class Misc
		{
			// CBA_fnc_getGroupIndex
			class getGroupIndex
			{
				description = "Finds out the actual ID number of a person within his group as assigned by the game and used in the squad leader's command menu, not just the order within the units of his group (this order can change due to players joining and leaving the game, deaths or promotions).";
				file = "\x\cba\Addons\main\misc_CBA_fnc_getGroupIndex.sqf";
			};
			// CBA_fnc_equals
			class equals
			{
				description = "Compares ANY two values, including nil, null, arrays or nested arrays, for equality";
				file = "\x\cba\Addons\main\misc_CBA_fnc_equals.sqf";
			};
		};
		class Debug
		{
			// CBA_fnc_error
			class error
			{
				description = "Logs an error message to the RPT log.";
				file = "\x\cba\Addons\main\debug_CBA_fnc_error.sqf";
			};
			// CBA_fnc_log
			class log
			{
				description = "Logs a message to the RPT log.";
				file = "\x\cba\Addons\main\debug_CBA_fnc_log.sqf";
			};
		};
		class Strings
		{
			// CBA_fnc_formatNumber
			class formatNumber
			{
				description = "Formats a number to a minimum integer width and to a specific number of decimal places (including padding with 0s and correct rounding). Numbers are always displayed fully, never being condensed using an exponent (e.g. the number 1.234e9 would be given as ""1234000000"").";
				file = "\x\cba\Addons\main\strings_CBA_fnc_formatNumber.sqf";
			};
			// CBA_fnc_capitalize
			class capitalize
			{
				description = "Upper case the first letter of the string, lower case the rest.";
				file = "\x\cba\Addons\main\strings_CBA_fnc_capitalize.sqf";
			};
			// CBA_fnc_trim
			class trim
			{
				description = "Trims white-space (space, tab, newline) from the both ends of a string.";
				file = "\x\cba\Addons\main\strings_CBA_fnc_trim.sqf";
			};
			// CBA_fnc_replace
			class replace
			{
				description = "Replaces substrings within a string. Case-dependent.";
				file = "\x\cba\Addons\main\strings_CBA_fnc_replace.sqf";
			};
			// CBA_fnc_split
			class split
			{
				description = "Splits a string into substrings using a separator. Inverse of CBA_fnc_join.";
				file = "\x\cba\Addons\main\strings_CBA_fnc_split.sqf";
			};
			// CBA_fnc_find
			class find
			{
				description = "Finds a string within another string.";
				file = "\x\cba\Addons\main\strings_CBA_fnc_find.sqf";
			};
			// CBA_fnc_strLen
			class strLen
			{
				description = "Counts the number of characters in a string.";
				file = "\x\cba\Addons\main\strings_CBA_fnc_strLen.sqf";
			};
			// CBA_fnc_rightTrim
			class rightTrim
			{
				description = "Trims white-space (space, tab, newline) from the right end of a string.";
				file = "\x\cba\Addons\main\strings_CBA_fnc_rightTrim.sqf";
			};
			// CBA_fnc_leftTrim
			class leftTrim
			{
				description = "Trims white-space (space, tab, newline) from the left end of a string.";
				file = "\x\cba\Addons\main\strings_CBA_fnc_leftTrim.sqf";
			};
			// CBA_fnc_join
			class join
			{
				description = "Joins an array of strings into a single string, joining each fragment around a separator string. Inverse of CBA_fnc_split.";
				file = "\x\cba\Addons\main\strings_CBA_fnc_join.sqf";
			};
		};
		class Hash
		{
			// CBA_fnc_hashGet
			class hashGet
			{
				description = "Gets a value for a given key from a Hash.";
				file = "\x\cba\Addons\main\hash_CBA_fnc_hashGet.sqf";
			};
			// CBA_fnc_hashSet
			class hashSet
			{
				description = "Sets a value for a given key in a Hash.";
				file = "\x\cba\Addons\main\hash_CBA_fnc_hashSet.sqf";
			};
			// CBA_fnc_hashEachPair
			class hashEachPair
			{
				description = "Iterate through all keys and values in a Hash.";
				file = "\x\cba\Addons\main\hash_CBA_fnc_hashEachPair.sqf";
			};
			// CBA_fnc_hashCreate
			class hashCreate
			{
				description = "Check if a Hash has a value defined for a key.";
				file = "\x\cba\Addons\main\hash_CBA_fnc_hashCreate.sqf";
			};
			// CBA_fnc_isHash
			class isHash
			{
				description = "Check if a value is a Hash data structure.";
				file = "\x\cba\Addons\main\hash_CBA_fnc_isHash.sqf";
			};
			// CBA_fnc_hashHasKey
			class hashHasKey
			{
				description = "Check if a Hash has a value defined for a key.";
				file = "\x\cba\Addons\main\hash_CBA_fnc_hashHasKey.sqf";
			};
		};
		class Yaml
		{
			// CBA_fnc_parseYAML
			class parseYAML
			{
				description = "Parses a YAML file into a nexted array/Hash structure.";
				file = "\x\cba\Addons\main\yaml_CBA_fnc_parseYAML.sqf";
			};
		};
		class Test
		{
			// CBA_fnc_testMain
			class testMain
			{
				description = "Tests CBA main functions.";
				file = "\x\cba\Addons\main\test_CBA_fnc_testMain.sqf";
			};
		};
		class Events
		{
			// CBA_fnc_remoteEvent
			class remoteEvent
			{
				description = "Raises a CBA event on all machines EXCEPT the local one.";
				file = "\x\cba\Addons\main\events_CBA_fnc_remoteEvent.sqf";
			};
			// CBA_fnc_globalEvent
			class globalEvent
			{
				description = "Raises a CBA event on all machines, including the local one.";
				file = "\x\cba\Addons\main\events_CBA_fnc_globalEvent.sqf";
			};
			// CBA_fnc_localEvent
			class localEvent
			{
				description = "Raises a CBA event only on the local machine.";
				file = "\x\cba\Addons\main\events_CBA_fnc_localEvent.sqf";
			};
			// CBA_fnc_removeEventHandler
			class removeEventHandler
			{
				description = "Removes an event handler previously registered with CBA_fnc_addEventHandler.";
				file = "\x\cba\Addons\main\events_CBA_fnc_removeEventHandler.sqf";
			};
			// CBA_fnc_addEventHandler
			class addEventHandler
			{
				description = "Registers an event handler for a specific CBA event.";
				file = "\x\cba\Addons\main\events_CBA_fnc_addEventHandler.sqf";
			};
		};
	};
};

#endif // FUNCTIONS_CONFIG
